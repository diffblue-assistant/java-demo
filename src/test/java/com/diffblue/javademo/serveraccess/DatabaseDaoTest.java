package com.diffblue.javademo.serveraccess;

import com.diffblue.deeptestutils.IterAnswer;
import com.mongodb.MongoClient;
import org.junit.Test;

import java.lang.reflect.Method;
import java.util.ArrayList;

import com.diffblue.deeptestutils.Reflector;
import org.junit.runner.RunWith;
import org.mockito.AdditionalMatchers;
import org.mockito.Matchers;
import org.mockito.Mockito;
import org.powermock.api.mockito.PowerMockito;
import org.powermock.core.classloader.annotations.PrepareForTest;

@RunWith(org.powermock.modules.junit4.PowerMockRunner.class)
public class DatabaseDaoTest {

  /* testedClasses: DatabaseDao */

  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers the entire function.
   */

  @PrepareForTest( { com.diffblue.javademo.serveraccess.DatabaseDao.class } )
  @Test
  public void DatabaseDao_connectToDb_000_98b085642685b7e2() throws Throwable {

    {
      /* Setup mocks */
      MongoClient mock1 = Mockito.mock(com.mongodb.MongoClient.class);
      ArrayList mongoClientInstances = new ArrayList();
      mongoClientInstances.add(mock1);
      final ArrayList mongoClientAnswerList = new ArrayList();
      final ArrayList<Object[]> mongoClientExpectationList = new ArrayList<Object[]>();
      final IterAnswer mongoClientAnswerObject = new IterAnswer("com.mongodb.MongoClient", "com_mongodb_MongoClient", mongoClientAnswerList, mongoClientExpectationList);
      mongoClientAnswerList.add(mock1);
      PowerMockito.whenNew(com.mongodb.MongoClient.class).withAnyArguments().thenAnswer(mongoClientAnswerObject);
      final ArrayList mongoClientAnswerList2 = new ArrayList();
      final ArrayList<Object[]> mongoClientExpectationList2 = new ArrayList<Object[]>();
      final IterAnswer mongoClientAnswerObject2 = new IterAnswer("com.mongodb.MongoClient", "getDatabase", mongoClientAnswerList2, mongoClientExpectationList2);
      mongoClientAnswerList2.add(null);

      /* Arrange */
      DatabaseDao param_4 = DatabaseDao.getInstance();
      Reflector.setField(param_4, "port", 0);
      Reflector.setField(param_4, "hostname", "");
      Reflector.setField(param_4, "dbName", "");
      Reflector.setField(param_4, "mongoDatabase", null);

      for(Object mongoClientIter : mongoClientInstances)
        Mockito.when(((MongoClient)mongoClientIter).getDatabase(AdditionalMatchers.or(Matchers.isA(String.class), Matchers.isNull(String.class)))).thenAnswer(mongoClientAnswerObject2);

      /* Act */
      Class<?> c = Reflector.forName("com.diffblue.javademo.serveraccess.DatabaseDao");
      Method m = c.getDeclaredMethod("connectToDb");
      m.setAccessible(true);
      m.invoke(param_4);

      /* Method return type is void, or not expected to return */
    }
  }
}
